# Testing and Validation

This document provides an overview of the testing and validation process for the various components of the robotic system, including the RPLidar A1M8 sensor, MPU6050 Inertial Measurement Unit (IMU), wheel encoder, and FlySky FS-i6 radio controller.

## 1. RPLidar A1M8 Sensor

### Overview
The RPLidar A1M8 sensor's measurements were tested directly on the Raspberry Pi 5. The sensor data was acquired serially, processed by converting hexadecimal values into decimal values, and then separated into distance and angle bytes to calculate the X and Y coordinates. These coordinates were added to a Point Cloud Data (.pcd) file and visualized in Rviz.

### Validation
The accuracy of the sensor measurements was confirmed by ensuring that the resulting point cloud accurately mirrored the physical environment.

![Point Cloud](../../src/imgs/testing/lidar/pointcloud.png)
*Figure 1: Point Cloud obtained from the Lidar measurements during testing.*

## 2. MPU6050 Inertial Measurement Unit (IMU)

### Overview
The IMU measurements were tested directly within the ROS node by logging and visually verifying the data in real-time. The accuracy of the calibration was tested by plotting both calibrated and raw data along the X, Y, and Z axes using a Python script.

### Validation
To assess the quality of the calibration, only a subset of the values was plotted. The calibrated values were closer to the ideal value of 1 along the axes, indicating a successful calibration.

#### Plots:
- **X and Y Axes**  
  ![XY Plot](../../src/imgs/testing/imu/calibration/xyplot.png)
- **X and Z Axes**  
  ![XZ Plot](../../src/imgs/testing/imu/calibration/xzplot.png)
- **Y and Z Axes**  
  ![YZ Plot](../../src/imgs/testing/imu/calibration/yzplot.png)
- **3D Plot**  
  ![3D Plot](../../src/imgs/testing/imu/calibration/3daccelplot.png)

*Figures 2-5: Raw and calibrated values plotted along different axes.*

#### Calibration Metrics:
| Metric | X Axis | Y Axis | Z Axis |
|--------|--------|--------|--------|
| Mean Difference (Bias) | 0.3330 | 0.1280 | 0.3581 |
| Standard Deviation of Differences | 0.2079 | 0.0726 | 0.0328 |
| RMSE | 0.3917 | 0.1468 | 0.3595 |
| Maximum Difference | 0.7073 | 0.2678 | 0.4553 |
| Minimum Difference | 0.0295 | -0.0582 | 0.2889 |
| Mean Absolute Error | 0.3330 | 0.1317 | 0.3581 |
| Percentage Improvement | -10.55% | 54.40% | -12.56% |
| Correlation Coefficient | 0.9695 | 0.9979 | 0.9967 |

*Table 1: Calibration Metrics for Accelerometer Data.*

## 3. Wheel Encoder

### Overview
The wheel encoder was tested in the ROS node by logging the measured speed and verifying that it reflected the robot's motion. Additionally, an oscilloscope was used to capture and analyze the pulses generated by the encoder.

### Validation
The oscilloscope capture showed that when the signal was low for an extended period, the robot was stationary. Multiple consecutive pulses indicated that the robot was in motion.

![Oscilloscope Capture](../../src/imgs/testing/encoder/encoder_testing.png)
*Figure 6: Pulse modification captured by the oscilloscope during the testing of the wheel encoder.*

## 4. FlySky FS-i6 Radio Controller

### Overview
The FlySky FS-i6 radio controller and motor control module were tested using both visual cues and an oscilloscope. The period of the PWM signal was checked to ensure correct functionality.

### Validation
- **Neutral State**: In the $[1ms, 1.5ms)$ range, the robot should move backward or the servo motor should steer left.
- **Forward Movement and Steering**: In the $(1.5ms, 2ms]$ range, the robot should move forward or the servo motor should steer right.
- **Neutral Position**: At $1.5ms$, the robot should remain neutral.

#### Oscilloscope Captures:
- **Neutral State**  
- **Driving State**  
  ![Neutral State](../../src/imgs/testing/flysky/neutral_state.jpg)
  ![Driving State](../../src/imgs/testing/flysky/driving_state.jpg)

*Figures 7-8: PWM signal periods captured by the oscilloscope during testing.*

---

This README provides a detailed overview of the testing procedures and validation results for the sensors and modules used in the robot developed for my bachelor's thesis, ensuring their functionality and accuracy.
